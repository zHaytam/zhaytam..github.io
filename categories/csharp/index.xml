<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on Awaiting Bits</title>
    <link>https://blog.zhaytam.com/categories/csharp/</link>
    <description>Recent content in CSharp on Awaiting Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zhaytam.com/categories/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# Expression Trees: Property Getters</title>
      <link>https://blog.zhaytam.com/2020/11/17/expression-trees-property-getter/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/11/17/expression-trees-property-getter/</guid>
      <description>There are times where I needed to do some things dynamically and I typically think of Expression Trees to do it. Don&amp;rsquo;t get me wrong, Reflection does the job most of the time, but it&amp;rsquo;s known to be very slow in almost all cases. I happen to have a bit of experience in the former.</description>
    </item>
    
    <item>
      <title>Extract Available Settings Using C#</title>
      <link>https://blog.zhaytam.com/2020/10/19/available-settings-extraction/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/10/19/available-settings-extraction/</guid>
      <description>I was working these days on my library Blazor.Diagrams and I needed to write some documentation to show all the available/possible options. I could&amp;rsquo;ve done it manually, but there was quiet a few settings and I didn&amp;rsquo;t want to have to update the table every time new ones are added.</description>
    </item>
    
    <item>
      <title>C# 9 - Immutability - Records &amp; Init-only Properties</title>
      <link>https://blog.zhaytam.com/2020/07/03/csharp-9-immutability-records-init-only-properties/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/07/03/csharp-9-immutability-records-init-only-properties/</guid>
      <description>Immutability has been getting popular these last years, especially with the rise of not only functional programming and but also JS frameworks such as React.
It&amp;rsquo;s an important concept for many reasons, but I won&amp;rsquo;t get into it in this blog post because it&amp;rsquo;s not the point. Although I would urge you to either read The Dao of Immutability or watch Jon Skeet&amp;rsquo;s The changing state of immutability in c# video, which explain it in details.</description>
    </item>
    
    <item>
      <title>Dynamic Sorting and Filtering in C#</title>
      <link>https://blog.zhaytam.com/2020/05/17/dynamic-sorting-filtering-csharp/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/05/17/dynamic-sorting-filtering-csharp/</guid>
      <description>If you ever wondered how you could dynamically filter and/or sort your queries without having to write a huge switch statement with all the possible properties and operations, you&amp;rsquo;ve come to the right place!
Today we&amp;rsquo;ll see how we can generate these types of operations at runtime and on the fly.</description>
    </item>
    
    <item>
      <title>Trying out the new DataFrame package in .NET Core</title>
      <link>https://blog.zhaytam.com/2019/12/17/trying-out-dataframe-package-netcore/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/12/17/trying-out-dataframe-package-netcore/</guid>
      <description>Yesterday, Prashanth Govindarajan posted an article about DataFrame on the .NET Blog. I got excited and wanted to try the library as soon as I could. In this post, I will explain what the library is intended for and what are my thoughts on it.
The package The DataFrame related classes were introduced in the package Microsoft.</description>
    </item>
    
    <item>
      <title>Socks5 – A .NET Core implementation from scratch</title>
      <link>https://blog.zhaytam.com/2019/11/15/socks5-a-net-core-implementation-from-scratch/</link>
      <pubDate>Fri, 15 Nov 2019 11:23:57 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/11/15/socks5-a-net-core-implementation-from-scratch/</guid>
      <description>A few days ago I needed a way to connect to a server using a Socks5 proxy but couldn&amp;rsquo;t find an up-to-date implementation for .NET Core, so I decided to give it a go myself.
The implementation is pretty straightforward and easy, I got inspired from starksoft-aspen and followed the official RFC.</description>
    </item>
    
    <item>
      <title>Instanciating a Type at Runtime – C# Benchmarks</title>
      <link>https://blog.zhaytam.com/2019/04/26/fas-to-instanciating-a-type-at-runtime/</link>
      <pubDate>Fri, 26 Apr 2019 00:06:15 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/04/26/fas-to-instanciating-a-type-at-runtime/</guid>
      <description>Assuming you are familiar with C#;
If I give you a Type and tell you to create an object with it, you would automatically think of Activator.CreateInstance right?
What if I tell you that instanciating a Type using Expression Trees is much faster?
The code for the benchmarks is in this repository.</description>
    </item>
    
  </channel>
</rss>
