<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET Core on Awaiting Bits</title>
    <link>https://blog.zhaytam.com/categories/asp.net-core/</link>
    <description>Recent content in ASP.NET Core on Awaiting Bits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zhaytam.com/categories/asp.net-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aspect Oriented Programming using proxies in ASP.NET Core</title>
      <link>https://blog.zhaytam.com/2020/08/18/aspnetcore-dynamic-proxies-for-aop/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/08/18/aspnetcore-dynamic-proxies-for-aop/</guid>
      <description>After working with Spring Boot for a couple of months now, one thing that I find lacking in ASP.NET Core (C#) is Aspect Oriented Programming (AOP).
 In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a &amp;ldquo;pointcut&amp;rdquo; specification, such as &amp;ldquo;log all function calls when the function&amp;rsquo;s name begins with &amp;lsquo;set&amp;rsquo;&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Health Checks in ASP.NET Core</title>
      <link>https://blog.zhaytam.com/2020/04/30/health-checks-aspnetcore/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2020/04/30/health-checks-aspnetcore/</guid>
      <description>Health checks are a set of checks (duh) that you perform in order to tell whether an application/service is up, running &amp;amp; healthy or not. It&amp;rsquo;s usually one or more endpoints that reports the status, the response differs from language/framework to an other.
Health checks are very useful especially when your application depends on other things like a database or even other services.</description>
    </item>
    
    <item>
      <title>Google Sign-In for ASP.NET Core Web APIs</title>
      <link>https://blog.zhaytam.com/2019/10/03/google-sign-in-asp-net-core-web-api/</link>
      <pubDate>Thu, 03 Oct 2019 08:35:40 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/10/03/google-sign-in-asp-net-core-web-api/</guid>
      <description>There is a lot of tutorials that show how to integrate Google Sign-In in your website, but only a handful show how to integrate it in a REST API.
Today I&amp;rsquo;ll be showing how you can add Google Sign-In and still manage users in your back-end.
Overview Here&amp;rsquo;s a sequence diagram showing how it all works:</description>
    </item>
    
    <item>
      <title>What’s new in ASP.NET Core 3.0, Blazor and SignalR</title>
      <link>https://blog.zhaytam.com/2019/09/13/whats-new-asp-net-core-3/</link>
      <pubDate>Fri, 13 Sep 2019 18:06:20 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/09/13/whats-new-asp-net-core-3/</guid>
      <description>I got interested in ASP.NET Core 3.0 since the first preview and followed it very closely. I started using it since preview2 and will now soon go to production with it (preview9).
I compiled this list to have all the new features, improvements and breaking changes that happened during this time for easy access and accessibility.</description>
    </item>
    
    <item>
      <title>EmailSender Service using FluentEmail &amp; Razor Templates</title>
      <link>https://blog.zhaytam.com/2019/06/08/emailsender-service-fluent-email-razor-templates/</link>
      <pubDate>Sat, 08 Jun 2019 12:58:48 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/06/08/emailsender-service-fluent-email-razor-templates/</guid>
      <description>Sending emails is a very important functionality for any website nowdays, either to send account verification emails, newsletter emails or even notification emails.
Today I&amp;rsquo;ll be showing how you can create your own EmailSender Service in ASP.NET Core using FluentEmail and Razor templates for rich HTML emails.
EmailSender interface If you&amp;rsquo;re working with a project that implements a Clean Architecture, you&amp;rsquo;ll want to create an interface in your Core project to define what you need the service to do, as well as to have the possibility to use it from the Core project too.</description>
    </item>
    
    <item>
      <title>ASP.NET Core – Checking ModelState.IsValid is boring</title>
      <link>https://blog.zhaytam.com/2019/04/13/asp-net-core-checking-modelstate-isvalid-is-boring/</link>
      <pubDate>Sat, 13 Apr 2019 17:12:34 +0000</pubDate>
      
      <guid>https://blog.zhaytam.com/2019/04/13/asp-net-core-checking-modelstate-isvalid-is-boring/</guid>
      <description>Checking if a model is valid is pretty an automatic behavior at this point. Whenever a request expects a model, we need to make sure that the validation is good, and we use ModelState.IsValid for that.
But that becomes boring, most of the time (if not always) we redirect to the same page, another page or return a bad request in case of an API.</description>
    </item>
    
  </channel>
</rss>
